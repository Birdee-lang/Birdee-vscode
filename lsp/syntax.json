{
    "scopeName": "source.birdee",
    "patterns": [{ "include": "#expression" }],
    "repository": {
      "expression": {
        "patterns": [{ "include": "#control" },
            { "include": "#storage" },
            { "include": "#paren-expression" },
            { "include": "#bracket-expression" },
            { "include": "#string" },
            { "include": "#py-expression" },
            { "include": "#tristring" },
            { "include": "#blockcomment" },
            { "include": "#comment" },
            { "include": "#const" },
            { "include": "#number" },
            { "include": "#operator" },
            { "include": "#class_decl" },
            { "include": "#function_decl" },
            { "include": "#function_call" }
        ]
      },
      "class_decl": {
        "captures": {
          "1": {
            "name": "storage.type.birdee"
          },
          "2": {
            "name": "entity.name.type.birdee"
          },
          "3": {
            "name": "entity.other.inherited-class.birdee"
          },
          "4": {
            "name": "keyword.control.birdee"
          },
          "5": {
            "name": "entity.other.inherited-class.birdee"
          },
          "6": {
            "name": "entity.other.inherited-class.birdee"
          },
          "7": {
            "name": "entity.other.inherited-class.birdee"
          },
          "8": {
            "name": "entity.other.inherited-class.birdee"
          }
        },
        "match": "\\b(?:(struct|class|interface)\\s+([\\w\\d]+)(?:\\s+\\:\\s+([\\w\\d]+))?(?:\\s+(implements)\\s+(?:([\\w\\d]+)\\s*)?(?:\\,\\s*([\\w\\d]+)\\s*)?(?:\\,\\s*([\\w\\d]+)\\s*)?(?:\\,\\s*([\\w\\d]+)\\s*)?)?)\\b",
        "comment": "TODO don't know to capture group dynamically, support at most 4 implementation for now..."
      },
      "function_decl": {
        "captures": {
          "1": {
            "name": "storage.type.birdee"
          },
          "2": {
            "name": "entity.name.function.birdee"
          }
        },
        "match": "\\b(?:(func|function)\\s+([\\w\\d]+))\\b"
      },
      "function_call": {
        "captures": {
          "1": {
            "name": "entity.name.function.birdee"
          }
        },
        "match": "(?:([\\w\\d]+)\\(.*\\))"
      },
      "operator": {
        "patterns": [
          {
            "match": "(?:\\-\\>|\\<\\-|\\-\\-\\>|\\=\\>)",
            "name": "keyword.operator.arrow.birdee"
          },
          {
            "match": "(?:\\+|\\-|\\*|\\/|\\%)",
            "name": "keyword.operator.arithmetic.birdee"
          },
          {
            "match": "(?:===|==|\\!==|\\!=|\\>=|\\<=)",
            "name": "keyword.operator.relation.birdee"
          },
          {
            "match": "(?:\\>|\\<|\\|\\||\\!|\\&\\&)",
            "name": "keyword.operator.boolean.birdee"
          },
          {
            "match": "(?:(?![\\<\\>\\!=])=(?!=))",
            "name": "keyword.operator.update.birdee"
          },
          {
            "match": "(?:\\&|\\||\\^)",
            "name": "keyword.operator.bitwise.birdee"
          },
          {
            "match": "(?:\\.)",
            "name": "keyword.operator.dots.birdee"
          }
        ]
      },
      "control": {
        "match": "\\b(?:if|then|else|end|while|for|import|package|as|continue|break|to|till|try|catch|throw|defer|new|return)\\b",
        "name": "keyword.control.birdee"
      },
      "storage": {
        "patterns": [
          {
            "match": "\\b(?:dim|closure|declare|alias|functype|int|long|byte|ulong|uint|short|float|double|pointer|boolean)\\b",
            "name": "storage.type.birdee"
          },
          {
            "match": "\\b(?:abstract|private|public)\\b",
            "name": "storage.modifier.birdee"
          }
        ]
      },
      "const": {
        "patterns": [
          {
            "match": "\\b(?:true|false|null|nullptr)\\b",
            "name": "constant.language.birdee"
          },
          {
            "match": "\\b(?:this|super)\\b",
            "name": "constant.other.birdee"
          }
        ]
      },
      "number": {
        "match": "\\b(?:([0-9]+\\.)?[0-9]+)\\b",
        "name": "constant.numeric.birdee"
      },
      "paren-expression": {
        "begin": "\\(",
        "end": "\\)",
        "beginCaptures": {
          "0": { "name": "punctuation.paren.open" }
        },
        "endCaptures": {
          "0": { "name": "punctuation.paren.close" }
        },
        "name": "expression.group",
        "patterns": [{ "include": "#expression" }]
      },
      "bracket-expression": {
        "begin": "\\[",
        "end": "\\]",
        "beginCaptures": {
          "0": { "name": "punctuation.bracket.open" }
        },
        "endCaptures": {
          "0": { "name": "punctuation.bracket.close" }
        },
        "name": "expression.group",
        "patterns": [{ "include": "#expression" }]
      },
      "string": {
        "begin": "\"",
        "end": "\"",
        "name": "string.quoted.double.birdee",
        "beginCaptures": {
            "0": { "name": "punctuation.quote.open" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.quote.close" }
          },
        "patterns": [{
            "match": "\\.",
            "name": "constant.character.escape.birdee"
          }]
      },
      "tristring": {
        "begin": "\"\"\"",
        "end": "\"\"\"",
        "name": "string.quoted.triple.birdee",
        "beginCaptures": {
            "0": { "name": "punctuation.triquote.open" }
          },
          "endCaptures": {
            "0": { "name": "punctuation.triquote.close" }
          },
        "patterns": [{
            "match": "\\.",
            "name": "constant.character.escape.birdee"
          }]
      },
      "comment": {
        "begin": "\\#",
        "end": "\\n",
        "name": "comment.line.number-sign",
        "patterns": [{
            "match": "\\."
          }]
      },
      "blockcomment": {
        "begin": "\\#\\#",
        "end": "\\#\\#",
        "name": "comment.block",
        "patterns": [{
            "match": "\\."
          }]
      },
      "py-expression": {
        "begin": "{\\@",
        "end": "\\@}",
        "beginCaptures": {
          "0": { "name": "punctuation.py.open" }
        },
        "endCaptures": {
          "0": { "name": "punctuation.py.close" }
        },
        "contentName": "meta.embedded.block.python",
        "name": "expression.py",
        "patterns": [
            {
              "include": "source.python"
            }
        ]
      }
    }
  }